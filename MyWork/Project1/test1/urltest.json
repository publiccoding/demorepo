b'\n<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"\n  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\n\n<html xmlns="http://www.w3.org/1999/xhtml">\n  <head>\n    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />\n    <title>19.2. json \xe2\x80\x94 JSON encoder and decoder &#8212; Python 3.6.4rc1 documentation</title>\n    <link rel="stylesheet" href="../_static/pydoctheme.css" type="text/css" />\n    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />\n    <script type="text/javascript">\n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    \'../\',\n        VERSION:     \'3.6.4rc1\',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: \'.html\',\n        HAS_SOURCE:  true,\n        SOURCELINK_SUFFIX: \'.txt\'\n      };\n    </script>\n    <script type="text/javascript" src="../_static/jquery.js"></script>\n    <script type="text/javascript" src="../_static/underscore.js"></script>\n    <script type="text/javascript" src="../_static/doctools.js"></script>\n    <script type="text/javascript" src="../_static/sidebar.js"></script>\n    <link rel="search" type="application/opensearchdescription+xml"\n          title="Search within Python 3.6.4rc1 documentation"\n          href="../_static/opensearch.xml"/>\n    <link rel="author" title="About these documents" href="../about.html" />\n    <link rel="index" title="Index" href="../genindex.html" />\n    <link rel="search" title="Search" href="../search.html" />\n    <link rel="copyright" title="Copyright" href="../copyright.html" />\n    <link rel="next" title="19.3. mailcap \xe2\x80\x94 Mailcap file handling" href="mailcap.html" />\n    <link rel="prev" title="19.1.15. email.iterators: Iterators" href="email.iterators.html" />\n    <link rel="shortcut icon" type="image/png" href="../_static/py.png" />\n    <link rel="canonical" href="https://docs.python.org/3/library/json.html" />\n    \n    <script type="text/javascript" src="../_static/copybutton.js"></script>\n    <script type="text/javascript" src="../_static/switchers.js"></script>\n    \n    \n \n\n  </head>\n  <body>  \n    <div class="related" role="navigation" aria-label="related navigation">\n      <h3>Navigation</h3>\n      <ul>\n        <li class="right" style="margin-right: 10px">\n          <a href="../genindex.html" title="General Index"\n             accesskey="I">index</a></li>\n        <li class="right" >\n          <a href="../py-modindex.html" title="Python Module Index"\n             >modules</a> |</li>\n        <li class="right" >\n          <a href="mailcap.html" title="19.3. mailcap \xe2\x80\x94 Mailcap file handling"\n             accesskey="N">next</a> |</li>\n        <li class="right" >\n          <a href="email.iterators.html" title="19.1.15. email.iterators: Iterators"\n             accesskey="P">previous</a> |</li>\n        <li><img src="../_static/py.png" alt=""\n                 style="vertical-align: middle; margin-top: -1px"/></li>\n        <li><a href="https://www.python.org/">Python</a> &#187;</li>\n        <li>\n          <span class="language_switcher_placeholder">en</span>\n          <span class="version_switcher_placeholder">3.6.4rc1</span>\n          <a href="../index.html">Documentation </a> &#187;\n        </li>\n\n          <li class="nav-item nav-item-1"><a href="index.html" >The Python Standard Library</a> &#187;</li>\n          <li class="nav-item nav-item-2"><a href="netdata.html" accesskey="U">19. Internet Data Handling</a> &#187;</li>\n    <li class="right">\n        \n\n    <div class="inline-search" style="display: none" role="search">\n        <form class="inline-search" action="../search.html" method="get">\n          <input placeholder="Quick search" type="text" name="q" />\n          <input type="submit" value="Go" />\n          <input type="hidden" name="check_keywords" value="yes" />\n          <input type="hidden" name="area" value="default" />\n        </form>\n    </div>\n    <script type="text/javascript">$(\'.inline-search\').show(0);</script>\n         |\n    </li>\n\n      </ul>\n    </div>    \n\n    <div class="document">\n      <div class="documentwrapper">\n        <div class="bodywrapper">\n          <div class="body" role="main">\n            \n  <div class="section" id="module-json">\n<span id="json-json-encoder-and-decoder"></span><h1>19.2. <a class="reference internal" href="#module-json" title="json: Encode and decode the JSON format."><code class="xref py py-mod docutils literal"><span class="pre">json</span></code></a> \xe2\x80\x94 JSON encoder and decoder<a class="headerlink" href="#module-json" title="Permalink to this headline">\xc2\xb6</a></h1>\n<p><strong>Source code:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.6/Lib/json/__init__.py">Lib/json/__init__.py</a></p>\n<hr class="docutils" />\n<p><a class="reference external" href="http://json.org">JSON (JavaScript Object Notation)</a>, specified by\n<span class="target" id="index-0"></span><a class="rfc reference external" href="https://tools.ietf.org/html/rfc7159.html"><strong>RFC 7159</strong></a> (which obsoletes <span class="target" id="index-1"></span><a class="rfc reference external" href="https://tools.ietf.org/html/rfc4627.html"><strong>RFC 4627</strong></a>) and by\n<a class="reference external" href="http://www.ecma-international.org/publications/standards/Ecma-404.htm">ECMA-404</a>,\nis a lightweight data interchange format inspired by\n<a class="reference external" href="https://en.wikipedia.org/wiki/JavaScript">JavaScript</a> object literal syntax\n(although it is not a strict subset of JavaScript <a class="footnote-reference" href="#rfc-errata" id="id1">[1]</a> ).</p>\n<p><a class="reference internal" href="#module-json" title="json: Encode and decode the JSON format."><code class="xref py py-mod docutils literal"><span class="pre">json</span></code></a> exposes an API familiar to users of the standard library\n<a class="reference internal" href="marshal.html#module-marshal" title="marshal: Convert Python objects to streams of bytes and back (with different constraints)."><code class="xref py py-mod docutils literal"><span class="pre">marshal</span></code></a> and <a class="reference internal" href="pickle.html#module-pickle" title="pickle: Convert Python objects to streams of bytes and back."><code class="xref py py-mod docutils literal"><span class="pre">pickle</span></code></a> modules.</p>\n<p>Encoding basic Python object hierarchies:</p>\n<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">json</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">([</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="p">(</span><span class="s1">&#39;baz&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)}])</span>\n<span class="go">&#39;[&quot;foo&quot;, {&quot;bar&quot;: [&quot;baz&quot;, null, 1.0, 2]}]&#39;</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\\&quot;</span><span class="s2">foo</span><span class="se">\\b</span><span class="s2">ar&quot;</span><span class="p">))</span>\n<span class="go">&quot;\\&quot;foo\\bar&quot;</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\\u1234</span><span class="s1">&#39;</span><span class="p">))</span>\n<span class="go">&quot;\\u1234&quot;</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\\\\</span><span class="s1">&#39;</span><span class="p">))</span>\n<span class="go">&quot;\\\\&quot;</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">({</span><span class="s2">&quot;c&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">},</span> <span class="n">sort_keys</span><span class="o">=</span><span class="kc">True</span><span class="p">))</span>\n<span class="go">{&quot;a&quot;: 0, &quot;b&quot;: 0, &quot;c&quot;: 0}</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">io</span> <span class="k">import</span> <span class="n">StringIO</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">io</span> <span class="o">=</span> <span class="n">StringIO</span><span class="p">()</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">([</span><span class="s1">&#39;streaming API&#39;</span><span class="p">],</span> <span class="n">io</span><span class="p">)</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">io</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()</span>\n<span class="go">&#39;[&quot;streaming API&quot;]&#39;</span>\n</pre></div>\n</div>\n<p>Compact encoding:</p>\n<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">json</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;4&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;6&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}],</span> <span class="n">separators</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="s1">&#39;:&#39;</span><span class="p">))</span>\n<span class="go">&#39;[1,2,3,{&quot;4&quot;:5,&quot;6&quot;:7}]&#39;</span>\n</pre></div>\n</div>\n<p>Pretty printing:</p>\n<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">json</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">({</span><span class="s1">&#39;4&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;6&#39;</span><span class="p">:</span> <span class="mi">7</span><span class="p">},</span> <span class="n">sort_keys</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">))</span>\n<span class="go">{</span>\n<span class="go">    &quot;4&quot;: 5,</span>\n<span class="go">    &quot;6&quot;: 7</span>\n<span class="go">}</span>\n</pre></div>\n</div>\n<p>Decoding JSON:</p>\n<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">json</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="s1">&#39;[&quot;foo&quot;, {&quot;bar&quot;:[&quot;baz&quot;, null, 1.0, 2]}]&#39;</span><span class="p">)</span>\n<span class="go">[&#39;foo&#39;, {&#39;bar&#39;: [&#39;baz&#39;, None, 1.0, 2]}]</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="s1">&#39;&quot;</span><span class="se">\\\\</span><span class="s1">&quot;foo</span><span class="se">\\\\</span><span class="s1">bar&quot;&#39;</span><span class="p">)</span>\n<span class="go">&#39;&quot;foo\\x08ar&#39;</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">io</span> <span class="k">import</span> <span class="n">StringIO</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">io</span> <span class="o">=</span> <span class="n">StringIO</span><span class="p">(</span><span class="s1">&#39;[&quot;streaming API&quot;]&#39;</span><span class="p">)</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">io</span><span class="p">)</span>\n<span class="go">[&#39;streaming API&#39;]</span>\n</pre></div>\n</div>\n<p>Specializing JSON object decoding:</p>\n<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">json</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">as_complex</span><span class="p">(</span><span class="n">dct</span><span class="p">):</span>\n<span class="gp">... </span>    <span class="k">if</span> <span class="s1">&#39;__complex__&#39;</span> <span class="ow">in</span> <span class="n">dct</span><span class="p">:</span>\n<span class="gp">... </span>        <span class="k">return</span> <span class="nb">complex</span><span class="p">(</span><span class="n">dct</span><span class="p">[</span><span class="s1">&#39;real&#39;</span><span class="p">],</span> <span class="n">dct</span><span class="p">[</span><span class="s1">&#39;imag&#39;</span><span class="p">])</span>\n<span class="gp">... </span>    <span class="k">return</span> <span class="n">dct</span>\n<span class="gp">...</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="s1">&#39;{&quot;__complex__&quot;: true, &quot;real&quot;: 1, &quot;imag&quot;: 2}&#39;</span><span class="p">,</span>\n<span class="gp">... </span>    <span class="n">object_hook</span><span class="o">=</span><span class="n">as_complex</span><span class="p">)</span>\n<span class="go">(1+2j)</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">decimal</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="s1">&#39;1.1&#39;</span><span class="p">,</span> <span class="n">parse_float</span><span class="o">=</span><span class="n">decimal</span><span class="o">.</span><span class="n">Decimal</span><span class="p">)</span>\n<span class="go">Decimal(&#39;1.1&#39;)</span>\n</pre></div>\n</div>\n<p>Extending <a class="reference internal" href="#json.JSONEncoder" title="json.JSONEncoder"><code class="xref py py-class docutils literal"><span class="pre">JSONEncoder</span></code></a>:</p>\n<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">json</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="k">class</span> <span class="nc">ComplexEncoder</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">JSONEncoder</span><span class="p">):</span>\n<span class="gp">... </span>    <span class="k">def</span> <span class="nf">default</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">obj</span><span class="p">):</span>\n<span class="gp">... </span>        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">complex</span><span class="p">):</span>\n<span class="gp">... </span>            <span class="k">return</span> <span class="p">[</span><span class="n">obj</span><span class="o">.</span><span class="n">real</span><span class="p">,</span> <span class="n">obj</span><span class="o">.</span><span class="n">imag</span><span class="p">]</span>\n<span class="gp">... </span>        <span class="c1"># Let the base class default method raise the TypeError</span>\n<span class="gp">... </span>        <span class="k">return</span> <span class="n">json</span><span class="o">.</span><span class="n">JSONEncoder</span><span class="o">.</span><span class="n">default</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span>\n<span class="gp">...</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="n">j</span><span class="p">,</span> <span class="bp">cls</span><span class="o">=</span><span class="n">ComplexEncoder</span><span class="p">)</span>\n<span class="go">&#39;[2.0, 1.0]&#39;</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">ComplexEncoder</span><span class="p">()</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="n">j</span><span class="p">)</span>\n<span class="go">&#39;[2.0, 1.0]&#39;</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">ComplexEncoder</span><span class="p">()</span><span class="o">.</span><span class="n">iterencode</span><span class="p">(</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="n">j</span><span class="p">))</span>\n<span class="go">[&#39;[2.0&#39;, &#39;, 1.0&#39;, &#39;]&#39;]</span>\n</pre></div>\n</div>\n<p>Using <a class="reference internal" href="#module-json.tool" title="json.tool: A command line to validate and pretty-print JSON."><code class="xref py py-mod docutils literal"><span class="pre">json.tool</span></code></a> from the shell to validate and pretty-print:</p>\n<div class="highlight-bash"><div class="highlight"><pre><span></span>$ <span class="nb">echo</span> <span class="s1">&#39;{&quot;json&quot;:&quot;obj&quot;}&#39;</span> <span class="p">|</span> python -m json.tool\n<span class="o">{</span>\n    <span class="s2">&quot;json&quot;</span>: <span class="s2">&quot;obj&quot;</span>\n<span class="o">}</span>\n$ <span class="nb">echo</span> <span class="s1">&#39;{1.2:3.4}&#39;</span> <span class="p">|</span> python -m json.tool\nExpecting property name enclosed in double quotes: line <span class="m">1</span> column <span class="m">2</span> <span class="o">(</span>char <span class="m">1</span><span class="o">)</span>\n</pre></div>\n</div>\n<p>See <a class="reference internal" href="#json-commandline"><span class="std std-ref">Command Line Interface</span></a> for detailed documentation.</p>\n<div class="admonition note">\n<p class="first admonition-title">Note</p>\n<p class="last">JSON is a subset of <a class="reference external" href="http://yaml.org/">YAML</a> 1.2.  The JSON produced by\nthis module\xe2\x80\x99s default settings (in particular, the default <em>separators</em>\nvalue) is also a subset of YAML 1.0 and 1.1.  This module can thus also be\nused as a YAML serializer.</p>\n</div>\n<div class="section" id="basic-usage">\n<h2>19.2.1. Basic Usage<a class="headerlink" href="#basic-usage" title="Permalink to this headline">\xc2\xb6</a></h2>\n<dl class="function">\n<dt id="json.dump">\n<code class="descclassname">json.</code><code class="descname">dump</code><span class="sig-paren">(</span><em>obj</em>, <em>fp</em>, <em>*</em>, <em>skipkeys=False</em>, <em>ensure_ascii=True</em>, <em>check_circular=True</em>, <em>allow_nan=True</em>, <em>cls=None</em>, <em>indent=None</em>, <em>separators=None</em>, <em>default=None</em>, <em>sort_keys=False</em>, <em>**kw</em><span class="sig-paren">)</span><a class="headerlink" href="#json.dump" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>Serialize <em>obj</em> as a JSON formatted stream to <em>fp</em> (a <code class="docutils literal"><span class="pre">.write()</span></code>-supporting\n<a class="reference internal" href="../glossary.html#term-file-like-object"><span class="xref std std-term">file-like object</span></a>) using this <a class="reference internal" href="#py-to-json-table"><span class="std std-ref">conversion table</span></a>.</p>\n<p>If <em>skipkeys</em> is true (default: <code class="docutils literal"><span class="pre">False</span></code>), then dict keys that are not\nof a basic type (<a class="reference internal" href="stdtypes.html#str" title="str"><code class="xref py py-class docutils literal"><span class="pre">str</span></code></a>, <a class="reference internal" href="functions.html#int" title="int"><code class="xref py py-class docutils literal"><span class="pre">int</span></code></a>, <a class="reference internal" href="functions.html#float" title="float"><code class="xref py py-class docutils literal"><span class="pre">float</span></code></a>, <a class="reference internal" href="functions.html#bool" title="bool"><code class="xref py py-class docutils literal"><span class="pre">bool</span></code></a>,\n<code class="docutils literal"><span class="pre">None</span></code>) will be skipped instead of raising a <a class="reference internal" href="exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code></a>.</p>\n<p>The <a class="reference internal" href="#module-json" title="json: Encode and decode the JSON format."><code class="xref py py-mod docutils literal"><span class="pre">json</span></code></a> module always produces <a class="reference internal" href="stdtypes.html#str" title="str"><code class="xref py py-class docutils literal"><span class="pre">str</span></code></a> objects, not\n<a class="reference internal" href="stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal"><span class="pre">bytes</span></code></a> objects. Therefore, <code class="docutils literal"><span class="pre">fp.write()</span></code> must support <a class="reference internal" href="stdtypes.html#str" title="str"><code class="xref py py-class docutils literal"><span class="pre">str</span></code></a>\ninput.</p>\n<p>If <em>ensure_ascii</em> is true (the default), the output is guaranteed to\nhave all incoming non-ASCII characters escaped.  If <em>ensure_ascii</em> is\nfalse, these characters will be output as-is.</p>\n<p>If <em>check_circular</em> is false (default: <code class="docutils literal"><span class="pre">True</span></code>), then the circular\nreference check for container types will be skipped and a circular reference\nwill result in an <a class="reference internal" href="exceptions.html#OverflowError" title="OverflowError"><code class="xref py py-exc docutils literal"><span class="pre">OverflowError</span></code></a> (or worse).</p>\n<p>If <em>allow_nan</em> is false (default: <code class="docutils literal"><span class="pre">True</span></code>), then it will be a\n<a class="reference internal" href="exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal"><span class="pre">ValueError</span></code></a> to serialize out of range <a class="reference internal" href="functions.html#float" title="float"><code class="xref py py-class docutils literal"><span class="pre">float</span></code></a> values (<code class="docutils literal"><span class="pre">nan</span></code>,\n<code class="docutils literal"><span class="pre">inf</span></code>, <code class="docutils literal"><span class="pre">-inf</span></code>) in strict compliance of the JSON specification.\nIf <em>allow_nan</em> is true, their JavaScript equivalents (<code class="docutils literal"><span class="pre">NaN</span></code>,\n<code class="docutils literal"><span class="pre">Infinity</span></code>, <code class="docutils literal"><span class="pre">-Infinity</span></code>) will be used.</p>\n<p>If <em>indent</em> is a non-negative integer or string, then JSON array elements and\nobject members will be pretty-printed with that indent level.  An indent level\nof 0, negative, or <code class="docutils literal"><span class="pre">&quot;&quot;</span></code> will only insert newlines.  <code class="docutils literal"><span class="pre">None</span></code> (the default)\nselects the most compact representation. Using a positive integer indent\nindents that many spaces per level.  If <em>indent</em> is a string (such as <code class="docutils literal"><span class="pre">&quot;\\t&quot;</span></code>),\nthat string is used to indent each level.</p>\n<div class="versionchanged">\n<p><span class="versionmodified">Changed in version 3.2: </span>Allow strings for <em>indent</em> in addition to integers.</p>\n</div>\n<p>If specified, <em>separators</em> should be an <code class="docutils literal"><span class="pre">(item_separator,</span> <span class="pre">key_separator)</span></code>\ntuple.  The default is <code class="docutils literal"><span class="pre">(\',</span> <span class="pre">\',</span> <span class="pre">\':</span> <span class="pre">\')</span></code> if <em>indent</em> is <code class="docutils literal"><span class="pre">None</span></code> and\n<code class="docutils literal"><span class="pre">(\',\',</span> <span class="pre">\':</span> <span class="pre">\')</span></code> otherwise.  To get the most compact JSON representation,\nyou should specify <code class="docutils literal"><span class="pre">(\',\',</span> <span class="pre">\':\')</span></code> to eliminate whitespace.</p>\n<div class="versionchanged">\n<p><span class="versionmodified">Changed in version 3.4: </span>Use <code class="docutils literal"><span class="pre">(\',\',</span> <span class="pre">\':</span> <span class="pre">\')</span></code> as default if <em>indent</em> is not <code class="docutils literal"><span class="pre">None</span></code>.</p>\n</div>\n<p>If specified, <em>default</em> should be a function that gets called for objects that\ncan\xe2\x80\x99t otherwise be serialized.  It should return a JSON encodable version of\nthe object or raise a <a class="reference internal" href="exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code></a>.  If not specified, <a class="reference internal" href="exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code></a>\nis raised.</p>\n<p>If <em>sort_keys</em> is true (default: <code class="docutils literal"><span class="pre">False</span></code>), then the output of\ndictionaries will be sorted by key.</p>\n<p>To use a custom <a class="reference internal" href="#json.JSONEncoder" title="json.JSONEncoder"><code class="xref py py-class docutils literal"><span class="pre">JSONEncoder</span></code></a> subclass (e.g. one that overrides the\n<code class="xref py py-meth docutils literal"><span class="pre">default()</span></code> method to serialize additional types), specify it with the\n<em>cls</em> kwarg; otherwise <a class="reference internal" href="#json.JSONEncoder" title="json.JSONEncoder"><code class="xref py py-class docutils literal"><span class="pre">JSONEncoder</span></code></a> is used.</p>\n<div class="versionchanged">\n<p><span class="versionmodified">Changed in version 3.6: </span>All optional parameters are now <a class="reference internal" href="../glossary.html#keyword-only-parameter"><span class="std std-ref">keyword-only</span></a>.</p>\n</div>\n</dd></dl>\n\n<dl class="function">\n<dt id="json.dumps">\n<code class="descclassname">json.</code><code class="descname">dumps</code><span class="sig-paren">(</span><em>obj</em>, <em>*</em>, <em>skipkeys=False</em>, <em>ensure_ascii=True</em>, <em>check_circular=True</em>, <em>allow_nan=True</em>, <em>cls=None</em>, <em>indent=None</em>, <em>separators=None</em>, <em>default=None</em>, <em>sort_keys=False</em>, <em>**kw</em><span class="sig-paren">)</span><a class="headerlink" href="#json.dumps" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>Serialize <em>obj</em> to a JSON formatted <a class="reference internal" href="stdtypes.html#str" title="str"><code class="xref py py-class docutils literal"><span class="pre">str</span></code></a> using this <a class="reference internal" href="#py-to-json-table"><span class="std std-ref">conversion\ntable</span></a>.  The arguments have the same meaning as in\n<a class="reference internal" href="#json.dump" title="json.dump"><code class="xref py py-func docutils literal"><span class="pre">dump()</span></code></a>.</p>\n<div class="admonition note">\n<p class="first admonition-title">Note</p>\n<p class="last">Unlike <a class="reference internal" href="pickle.html#module-pickle" title="pickle: Convert Python objects to streams of bytes and back."><code class="xref py py-mod docutils literal"><span class="pre">pickle</span></code></a> and <a class="reference internal" href="marshal.html#module-marshal" title="marshal: Convert Python objects to streams of bytes and back (with different constraints)."><code class="xref py py-mod docutils literal"><span class="pre">marshal</span></code></a>, JSON is not a framed protocol,\nso trying to serialize multiple objects with repeated calls to\n<a class="reference internal" href="#json.dump" title="json.dump"><code class="xref py py-func docutils literal"><span class="pre">dump()</span></code></a> using the same <em>fp</em> will result in an invalid JSON file.</p>\n</div>\n<div class="admonition note">\n<p class="first admonition-title">Note</p>\n<p class="last">Keys in key/value pairs of JSON are always of the type <a class="reference internal" href="stdtypes.html#str" title="str"><code class="xref py py-class docutils literal"><span class="pre">str</span></code></a>. When\na dictionary is converted into JSON, all the keys of the dictionary are\ncoerced to strings. As a result of this, if a dictionary is converted\ninto JSON and then back into a dictionary, the dictionary may not equal\nthe original one. That is, <code class="docutils literal"><span class="pre">loads(dumps(x))</span> <span class="pre">!=</span> <span class="pre">x</span></code> if x has non-string\nkeys.</p>\n</div>\n</dd></dl>\n\n<dl class="function">\n<dt id="json.load">\n<code class="descclassname">json.</code><code class="descname">load</code><span class="sig-paren">(</span><em>fp</em>, <em>*</em>, <em>cls=None</em>, <em>object_hook=None</em>, <em>parse_float=None</em>, <em>parse_int=None</em>, <em>parse_constant=None</em>, <em>object_pairs_hook=None</em>, <em>**kw</em><span class="sig-paren">)</span><a class="headerlink" href="#json.load" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>Deserialize <em>fp</em> (a <code class="docutils literal"><span class="pre">.read()</span></code>-supporting <a class="reference internal" href="../glossary.html#term-file-like-object"><span class="xref std std-term">file-like object</span></a>\ncontaining a JSON document) to a Python object using this <a class="reference internal" href="#json-to-py-table"><span class="std std-ref">conversion\ntable</span></a>.</p>\n<p><em>object_hook</em> is an optional function that will be called with the result of\nany object literal decoded (a <a class="reference internal" href="stdtypes.html#dict" title="dict"><code class="xref py py-class docutils literal"><span class="pre">dict</span></code></a>).  The return value of\n<em>object_hook</em> will be used instead of the <a class="reference internal" href="stdtypes.html#dict" title="dict"><code class="xref py py-class docutils literal"><span class="pre">dict</span></code></a>.  This feature can be used\nto implement custom decoders (e.g. <a class="reference external" href="http://www.jsonrpc.org">JSON-RPC</a>\nclass hinting).</p>\n<p><em>object_pairs_hook</em> is an optional function that will be called with the\nresult of any object literal decoded with an ordered list of pairs.  The\nreturn value of <em>object_pairs_hook</em> will be used instead of the\n<a class="reference internal" href="stdtypes.html#dict" title="dict"><code class="xref py py-class docutils literal"><span class="pre">dict</span></code></a>.  This feature can be used to implement custom decoders that\nrely on the order that the key and value pairs are decoded (for example,\n<a class="reference internal" href="collections.html#collections.OrderedDict" title="collections.OrderedDict"><code class="xref py py-func docutils literal"><span class="pre">collections.OrderedDict()</span></code></a> will remember the order of insertion). If\n<em>object_hook</em> is also defined, the <em>object_pairs_hook</em> takes priority.</p>\n<div class="versionchanged">\n<p><span class="versionmodified">Changed in version 3.1: </span>Added support for <em>object_pairs_hook</em>.</p>\n</div>\n<p><em>parse_float</em>, if specified, will be called with the string of every JSON\nfloat to be decoded.  By default, this is equivalent to <code class="docutils literal"><span class="pre">float(num_str)</span></code>.\nThis can be used to use another datatype or parser for JSON floats\n(e.g. <a class="reference internal" href="decimal.html#decimal.Decimal" title="decimal.Decimal"><code class="xref py py-class docutils literal"><span class="pre">decimal.Decimal</span></code></a>).</p>\n<p><em>parse_int</em>, if specified, will be called with the string of every JSON int\nto be decoded.  By default, this is equivalent to <code class="docutils literal"><span class="pre">int(num_str)</span></code>.  This can\nbe used to use another datatype or parser for JSON integers\n(e.g. <a class="reference internal" href="functions.html#float" title="float"><code class="xref py py-class docutils literal"><span class="pre">float</span></code></a>).</p>\n<p><em>parse_constant</em>, if specified, will be called with one of the following\nstrings: <code class="docutils literal"><span class="pre">\'-Infinity\'</span></code>, <code class="docutils literal"><span class="pre">\'Infinity\'</span></code>, <code class="docutils literal"><span class="pre">\'NaN\'</span></code>.\nThis can be used to raise an exception if invalid JSON numbers\nare encountered.</p>\n<div class="versionchanged">\n<p><span class="versionmodified">Changed in version 3.1: </span><em>parse_constant</em> doesn\xe2\x80\x99t get called on \xe2\x80\x98null\xe2\x80\x99, \xe2\x80\x98true\xe2\x80\x99, \xe2\x80\x98false\xe2\x80\x99 anymore.</p>\n</div>\n<p>To use a custom <a class="reference internal" href="#json.JSONDecoder" title="json.JSONDecoder"><code class="xref py py-class docutils literal"><span class="pre">JSONDecoder</span></code></a> subclass, specify it with the <code class="docutils literal"><span class="pre">cls</span></code>\nkwarg; otherwise <a class="reference internal" href="#json.JSONDecoder" title="json.JSONDecoder"><code class="xref py py-class docutils literal"><span class="pre">JSONDecoder</span></code></a> is used.  Additional keyword arguments\nwill be passed to the constructor of the class.</p>\n<p>If the data being deserialized is not a valid JSON document, a\n<a class="reference internal" href="#json.JSONDecodeError" title="json.JSONDecodeError"><code class="xref py py-exc docutils literal"><span class="pre">JSONDecodeError</span></code></a> will be raised.</p>\n<div class="versionchanged">\n<p><span class="versionmodified">Changed in version 3.6: </span>All optional parameters are now <a class="reference internal" href="../glossary.html#keyword-only-parameter"><span class="std std-ref">keyword-only</span></a>.</p>\n</div>\n</dd></dl>\n\n<dl class="function">\n<dt id="json.loads">\n<code class="descclassname">json.</code><code class="descname">loads</code><span class="sig-paren">(</span><em>s</em>, <em>*</em>, <em>encoding=None</em>, <em>cls=None</em>, <em>object_hook=None</em>, <em>parse_float=None</em>, <em>parse_int=None</em>, <em>parse_constant=None</em>, <em>object_pairs_hook=None</em>, <em>**kw</em><span class="sig-paren">)</span><a class="headerlink" href="#json.loads" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>Deserialize <em>s</em> (a <a class="reference internal" href="stdtypes.html#str" title="str"><code class="xref py py-class docutils literal"><span class="pre">str</span></code></a>, <a class="reference internal" href="stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal"><span class="pre">bytes</span></code></a> or <a class="reference internal" href="stdtypes.html#bytearray" title="bytearray"><code class="xref py py-class docutils literal"><span class="pre">bytearray</span></code></a>\ninstance containing a JSON document) to a Python object using this\n<a class="reference internal" href="#json-to-py-table"><span class="std std-ref">conversion table</span></a>.</p>\n<p>The other arguments have the same meaning as in <a class="reference internal" href="#json.load" title="json.load"><code class="xref py py-func docutils literal"><span class="pre">load()</span></code></a>, except\n<em>encoding</em> which is ignored and deprecated.</p>\n<p>If the data being deserialized is not a valid JSON document, a\n<a class="reference internal" href="#json.JSONDecodeError" title="json.JSONDecodeError"><code class="xref py py-exc docutils literal"><span class="pre">JSONDecodeError</span></code></a> will be raised.</p>\n<div class="versionchanged">\n<p><span class="versionmodified">Changed in version 3.6: </span><em>s</em> can now be of type <a class="reference internal" href="stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal"><span class="pre">bytes</span></code></a> or <a class="reference internal" href="stdtypes.html#bytearray" title="bytearray"><code class="xref py py-class docutils literal"><span class="pre">bytearray</span></code></a>. The\ninput encoding should be UTF-8, UTF-16 or UTF-32.</p>\n</div>\n</dd></dl>\n\n</div>\n<div class="section" id="encoders-and-decoders">\n<h2>19.2.2. Encoders and Decoders<a class="headerlink" href="#encoders-and-decoders" title="Permalink to this headline">\xc2\xb6</a></h2>\n<dl class="class">\n<dt id="json.JSONDecoder">\n<em class="property">class </em><code class="descclassname">json.</code><code class="descname">JSONDecoder</code><span class="sig-paren">(</span><em>*</em>, <em>object_hook=None</em>, <em>parse_float=None</em>, <em>parse_int=None</em>, <em>parse_constant=None</em>, <em>strict=True</em>, <em>object_pairs_hook=None</em><span class="sig-paren">)</span><a class="headerlink" href="#json.JSONDecoder" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>Simple JSON decoder.</p>\n<p>Performs the following translations in decoding by default:</p>\n<table border="1" class="docutils" id="json-to-py-table">\n<colgroup>\n<col width="44%" />\n<col width="56%" />\n</colgroup>\n<thead valign="bottom">\n<tr class="row-odd"><th class="head">JSON</th>\n<th class="head">Python</th>\n</tr>\n</thead>\n<tbody valign="top">\n<tr class="row-even"><td>object</td>\n<td>dict</td>\n</tr>\n<tr class="row-odd"><td>array</td>\n<td>list</td>\n</tr>\n<tr class="row-even"><td>string</td>\n<td>str</td>\n</tr>\n<tr class="row-odd"><td>number (int)</td>\n<td>int</td>\n</tr>\n<tr class="row-even"><td>number (real)</td>\n<td>float</td>\n</tr>\n<tr class="row-odd"><td>true</td>\n<td>True</td>\n</tr>\n<tr class="row-even"><td>false</td>\n<td>False</td>\n</tr>\n<tr class="row-odd"><td>null</td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n<p>It also understands <code class="docutils literal"><span class="pre">NaN</span></code>, <code class="docutils literal"><span class="pre">Infinity</span></code>, and <code class="docutils literal"><span class="pre">-Infinity</span></code> as their\ncorresponding <code class="docutils literal"><span class="pre">float</span></code> values, which is outside the JSON spec.</p>\n<p><em>object_hook</em>, if specified, will be called with the result of every JSON\nobject decoded and its return value will be used in place of the given\n<a class="reference internal" href="stdtypes.html#dict" title="dict"><code class="xref py py-class docutils literal"><span class="pre">dict</span></code></a>.  This can be used to provide custom deserializations (e.g. to\nsupport JSON-RPC class hinting).</p>\n<p><em>object_pairs_hook</em>, if specified will be called with the result of every\nJSON object decoded with an ordered list of pairs.  The return value of\n<em>object_pairs_hook</em> will be used instead of the <a class="reference internal" href="stdtypes.html#dict" title="dict"><code class="xref py py-class docutils literal"><span class="pre">dict</span></code></a>.  This\nfeature can be used to implement custom decoders that rely on the order\nthat the key and value pairs are decoded (for example,\n<a class="reference internal" href="collections.html#collections.OrderedDict" title="collections.OrderedDict"><code class="xref py py-func docutils literal"><span class="pre">collections.OrderedDict()</span></code></a> will remember the order of insertion). If\n<em>object_hook</em> is also defined, the <em>object_pairs_hook</em> takes priority.</p>\n<div class="versionchanged">\n<p><span class="versionmodified">Changed in version 3.1: </span>Added support for <em>object_pairs_hook</em>.</p>\n</div>\n<p><em>parse_float</em>, if specified, will be called with the string of every JSON\nfloat to be decoded.  By default, this is equivalent to <code class="docutils literal"><span class="pre">float(num_str)</span></code>.\nThis can be used to use another datatype or parser for JSON floats\n(e.g. <a class="reference internal" href="decimal.html#decimal.Decimal" title="decimal.Decimal"><code class="xref py py-class docutils literal"><span class="pre">decimal.Decimal</span></code></a>).</p>\n<p><em>parse_int</em>, if specified, will be called with the string of every JSON int\nto be decoded.  By default, this is equivalent to <code class="docutils literal"><span class="pre">int(num_str)</span></code>.  This can\nbe used to use another datatype or parser for JSON integers\n(e.g. <a class="reference internal" href="functions.html#float" title="float"><code class="xref py py-class docutils literal"><span class="pre">float</span></code></a>).</p>\n<p><em>parse_constant</em>, if specified, will be called with one of the following\nstrings: <code class="docutils literal"><span class="pre">\'-Infinity\'</span></code>, <code class="docutils literal"><span class="pre">\'Infinity\'</span></code>, <code class="docutils literal"><span class="pre">\'NaN\'</span></code>.\nThis can be used to raise an exception if invalid JSON numbers\nare encountered.</p>\n<p>If <em>strict</em> is false (<code class="docutils literal"><span class="pre">True</span></code> is the default), then control characters\nwill be allowed inside strings.  Control characters in this context are\nthose with character codes in the 0\xe2\x80\x9331 range, including <code class="docutils literal"><span class="pre">\'\\t\'</span></code> (tab),\n<code class="docutils literal"><span class="pre">\'\\n\'</span></code>, <code class="docutils literal"><span class="pre">\'\\r\'</span></code> and <code class="docutils literal"><span class="pre">\'\\0\'</span></code>.</p>\n<p>If the data being deserialized is not a valid JSON document, a\n<a class="reference internal" href="#json.JSONDecodeError" title="json.JSONDecodeError"><code class="xref py py-exc docutils literal"><span class="pre">JSONDecodeError</span></code></a> will be raised.</p>\n<div class="versionchanged">\n<p><span class="versionmodified">Changed in version 3.6: </span>All parameters are now <a class="reference internal" href="../glossary.html#keyword-only-parameter"><span class="std std-ref">keyword-only</span></a>.</p>\n</div>\n<dl class="method">\n<dt id="json.JSONDecoder.decode">\n<code class="descname">decode</code><span class="sig-paren">(</span><em>s</em><span class="sig-paren">)</span><a class="headerlink" href="#json.JSONDecoder.decode" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>Return the Python representation of <em>s</em> (a <a class="reference internal" href="stdtypes.html#str" title="str"><code class="xref py py-class docutils literal"><span class="pre">str</span></code></a> instance\ncontaining a JSON document).</p>\n<p><a class="reference internal" href="#json.JSONDecodeError" title="json.JSONDecodeError"><code class="xref py py-exc docutils literal"><span class="pre">JSONDecodeError</span></code></a> will be raised if the given JSON document is not\nvalid.</p>\n</dd></dl>\n\n<dl class="method">\n<dt id="json.JSONDecoder.raw_decode">\n<code class="descname">raw_decode</code><span class="sig-paren">(</span><em>s</em><span class="sig-paren">)</span><a class="headerlink" href="#json.JSONDecoder.raw_decode" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>Decode a JSON document from <em>s</em> (a <a class="reference internal" href="stdtypes.html#str" title="str"><code class="xref py py-class docutils literal"><span class="pre">str</span></code></a> beginning with a\nJSON document) and return a 2-tuple of the Python representation\nand the index in <em>s</em> where the document ended.</p>\n<p>This can be used to decode a JSON document from a string that may have\nextraneous data at the end.</p>\n</dd></dl>\n\n</dd></dl>\n\n<dl class="class">\n<dt id="json.JSONEncoder">\n<em class="property">class </em><code class="descclassname">json.</code><code class="descname">JSONEncoder</code><span class="sig-paren">(</span><em>*</em>, <em>skipkeys=False</em>, <em>ensure_ascii=True</em>, <em>check_circular=True</em>, <em>allow_nan=True</em>, <em>sort_keys=False</em>, <em>indent=None</em>, <em>separators=None</em>, <em>default=None</em><span class="sig-paren">)</span><a class="headerlink" href="#json.JSONEncoder" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>Extensible JSON encoder for Python data structures.</p>\n<p>Supports the following objects and types by default:</p>\n<table border="1" class="docutils" id="py-to-json-table">\n<colgroup>\n<col width="73%" />\n<col width="27%" />\n</colgroup>\n<thead valign="bottom">\n<tr class="row-odd"><th class="head">Python</th>\n<th class="head">JSON</th>\n</tr>\n</thead>\n<tbody valign="top">\n<tr class="row-even"><td>dict</td>\n<td>object</td>\n</tr>\n<tr class="row-odd"><td>list, tuple</td>\n<td>array</td>\n</tr>\n<tr class="row-even"><td>str</td>\n<td>string</td>\n</tr>\n<tr class="row-odd"><td>int, float, int- &amp; float-derived Enums</td>\n<td>number</td>\n</tr>\n<tr class="row-even"><td>True</td>\n<td>true</td>\n</tr>\n<tr class="row-odd"><td>False</td>\n<td>false</td>\n</tr>\n<tr class="row-even"><td>None</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<div class="versionchanged">\n<p><span class="versionmodified">Changed in version 3.4: </span>Added support for int- and float-derived Enum classes.</p>\n</div>\n<p>To extend this to recognize other objects, subclass and implement a\n<a class="reference internal" href="#json.JSONEncoder.default" title="json.JSONEncoder.default"><code class="xref py py-meth docutils literal"><span class="pre">default()</span></code></a> method with another method that returns a serializable object\nfor <code class="docutils literal"><span class="pre">o</span></code> if possible, otherwise it should call the superclass implementation\n(to raise <a class="reference internal" href="exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code></a>).</p>\n<p>If <em>skipkeys</em> is false (the default), then it is a <a class="reference internal" href="exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code></a> to\nattempt encoding of keys that are not <a class="reference internal" href="stdtypes.html#str" title="str"><code class="xref py py-class docutils literal"><span class="pre">str</span></code></a>, <a class="reference internal" href="functions.html#int" title="int"><code class="xref py py-class docutils literal"><span class="pre">int</span></code></a>,\n<a class="reference internal" href="functions.html#float" title="float"><code class="xref py py-class docutils literal"><span class="pre">float</span></code></a> or <code class="docutils literal"><span class="pre">None</span></code>.  If <em>skipkeys</em> is true, such items are simply\nskipped.</p>\n<p>If <em>ensure_ascii</em> is true (the default), the output is guaranteed to\nhave all incoming non-ASCII characters escaped.  If <em>ensure_ascii</em> is\nfalse, these characters will be output as-is.</p>\n<p>If <em>check_circular</em> is true (the default), then lists, dicts, and custom\nencoded objects will be checked for circular references during encoding to\nprevent an infinite recursion (which would cause an <a class="reference internal" href="exceptions.html#OverflowError" title="OverflowError"><code class="xref py py-exc docutils literal"><span class="pre">OverflowError</span></code></a>).\nOtherwise, no such check takes place.</p>\n<p>If <em>allow_nan</em> is true (the default), then <code class="docutils literal"><span class="pre">NaN</span></code>, <code class="docutils literal"><span class="pre">Infinity</span></code>, and\n<code class="docutils literal"><span class="pre">-Infinity</span></code> will be encoded as such.  This behavior is not JSON\nspecification compliant, but is consistent with most JavaScript based\nencoders and decoders.  Otherwise, it will be a <a class="reference internal" href="exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal"><span class="pre">ValueError</span></code></a> to encode\nsuch floats.</p>\n<p>If <em>sort_keys</em> is true (default: <code class="docutils literal"><span class="pre">False</span></code>), then the output of dictionaries\nwill be sorted by key; this is useful for regression tests to ensure that\nJSON serializations can be compared on a day-to-day basis.</p>\n<p>If <em>indent</em> is a non-negative integer or string, then JSON array elements and\nobject members will be pretty-printed with that indent level.  An indent level\nof 0, negative, or <code class="docutils literal"><span class="pre">&quot;&quot;</span></code> will only insert newlines.  <code class="docutils literal"><span class="pre">None</span></code> (the default)\nselects the most compact representation. Using a positive integer indent\nindents that many spaces per level.  If <em>indent</em> is a string (such as <code class="docutils literal"><span class="pre">&quot;\\t&quot;</span></code>),\nthat string is used to indent each level.</p>\n<div class="versionchanged">\n<p><span class="versionmodified">Changed in version 3.2: </span>Allow strings for <em>indent</em> in addition to integers.</p>\n</div>\n<p>If specified, <em>separators</em> should be an <code class="docutils literal"><span class="pre">(item_separator,</span> <span class="pre">key_separator)</span></code>\ntuple.  The default is <code class="docutils literal"><span class="pre">(\',</span> <span class="pre">\',</span> <span class="pre">\':</span> <span class="pre">\')</span></code> if <em>indent</em> is <code class="docutils literal"><span class="pre">None</span></code> and\n<code class="docutils literal"><span class="pre">(\',\',</span> <span class="pre">\':</span> <span class="pre">\')</span></code> otherwise.  To get the most compact JSON representation,\nyou should specify <code class="docutils literal"><span class="pre">(\',\',</span> <span class="pre">\':\')</span></code> to eliminate whitespace.</p>\n<div class="versionchanged">\n<p><span class="versionmodified">Changed in version 3.4: </span>Use <code class="docutils literal"><span class="pre">(\',\',</span> <span class="pre">\':</span> <span class="pre">\')</span></code> as default if <em>indent</em> is not <code class="docutils literal"><span class="pre">None</span></code>.</p>\n</div>\n<p>If specified, <em>default</em> should be a function that gets called for objects that\ncan\xe2\x80\x99t otherwise be serialized.  It should return a JSON encodable version of\nthe object or raise a <a class="reference internal" href="exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code></a>.  If not specified, <a class="reference internal" href="exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code></a>\nis raised.</p>\n<div class="versionchanged">\n<p><span class="versionmodified">Changed in version 3.6: </span>All parameters are now <a class="reference internal" href="../glossary.html#keyword-only-parameter"><span class="std std-ref">keyword-only</span></a>.</p>\n</div>\n<dl class="method">\n<dt id="json.JSONEncoder.default">\n<code class="descname">default</code><span class="sig-paren">(</span><em>o</em><span class="sig-paren">)</span><a class="headerlink" href="#json.JSONEncoder.default" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>Implement this method in a subclass such that it returns a serializable\nobject for <em>o</em>, or calls the base implementation (to raise a\n<a class="reference internal" href="exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code></a>).</p>\n<p>For example, to support arbitrary iterators, you could implement default\nlike this:</p>\n<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">default</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">o</span><span class="p">):</span>\n   <span class="k">try</span><span class="p">:</span>\n       <span class="n">iterable</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">o</span><span class="p">)</span>\n   <span class="k">except</span> <span class="ne">TypeError</span><span class="p">:</span>\n       <span class="k">pass</span>\n   <span class="k">else</span><span class="p">:</span>\n       <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="n">iterable</span><span class="p">)</span>\n   <span class="c1"># Let the base class default method raise the TypeError</span>\n   <span class="k">return</span> <span class="n">json</span><span class="o">.</span><span class="n">JSONEncoder</span><span class="o">.</span><span class="n">default</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">o</span><span class="p">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class="method">\n<dt id="json.JSONEncoder.encode">\n<code class="descname">encode</code><span class="sig-paren">(</span><em>o</em><span class="sig-paren">)</span><a class="headerlink" href="#json.JSONEncoder.encode" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>Return a JSON string representation of a Python data structure, <em>o</em>.  For\nexample:</p>\n<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">json</span><span class="o">.</span><span class="n">JSONEncoder</span><span class="p">()</span><span class="o">.</span><span class="n">encode</span><span class="p">({</span><span class="s2">&quot;foo&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;bar&quot;</span><span class="p">,</span> <span class="s2">&quot;baz&quot;</span><span class="p">]})</span>\n<span class="go">&#39;{&quot;foo&quot;: [&quot;bar&quot;, &quot;baz&quot;]}&#39;</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class="method">\n<dt id="json.JSONEncoder.iterencode">\n<code class="descname">iterencode</code><span class="sig-paren">(</span><em>o</em><span class="sig-paren">)</span><a class="headerlink" href="#json.JSONEncoder.iterencode" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>Encode the given object, <em>o</em>, and yield each string representation as\navailable.  For example:</p>\n<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">json</span><span class="o">.</span><span class="n">JSONEncoder</span><span class="p">()</span><span class="o">.</span><span class="n">iterencode</span><span class="p">(</span><span class="n">bigobject</span><span class="p">):</span>\n    <span class="n">mysocket</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class="section" id="exceptions">\n<h2>19.2.3. Exceptions<a class="headerlink" href="#exceptions" title="Permalink to this headline">\xc2\xb6</a></h2>\n<dl class="exception">\n<dt id="json.JSONDecodeError">\n<em class="property">exception </em><code class="descclassname">json.</code><code class="descname">JSONDecodeError</code><span class="sig-paren">(</span><em>msg</em>, <em>doc</em>, <em>pos</em><span class="sig-paren">)</span><a class="headerlink" href="#json.JSONDecodeError" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>Subclass of <a class="reference internal" href="exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal"><span class="pre">ValueError</span></code></a> with the following additional attributes:</p>\n<dl class="attribute">\n<dt id="json.JSONDecodeError.msg">\n<code class="descname">msg</code><a class="headerlink" href="#json.JSONDecodeError.msg" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>The unformatted error message.</p>\n</dd></dl>\n\n<dl class="attribute">\n<dt id="json.JSONDecodeError.doc">\n<code class="descname">doc</code><a class="headerlink" href="#json.JSONDecodeError.doc" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>The JSON document being parsed.</p>\n</dd></dl>\n\n<dl class="attribute">\n<dt id="json.JSONDecodeError.pos">\n<code class="descname">pos</code><a class="headerlink" href="#json.JSONDecodeError.pos" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>The start index of <em>doc</em> where parsing failed.</p>\n</dd></dl>\n\n<dl class="attribute">\n<dt id="json.JSONDecodeError.lineno">\n<code class="descname">lineno</code><a class="headerlink" href="#json.JSONDecodeError.lineno" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>The line corresponding to <em>pos</em>.</p>\n</dd></dl>\n\n<dl class="attribute">\n<dt id="json.JSONDecodeError.colno">\n<code class="descname">colno</code><a class="headerlink" href="#json.JSONDecodeError.colno" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>The column corresponding to <em>pos</em>.</p>\n</dd></dl>\n\n<div class="versionadded">\n<p><span class="versionmodified">New in version 3.5.</span></p>\n</div>\n</dd></dl>\n\n</div>\n<div class="section" id="standard-compliance-and-interoperability">\n<h2>19.2.4. Standard Compliance and Interoperability<a class="headerlink" href="#standard-compliance-and-interoperability" title="Permalink to this headline">\xc2\xb6</a></h2>\n<p>The JSON format is specified by <span class="target" id="index-2"></span><a class="rfc reference external" href="https://tools.ietf.org/html/rfc7159.html"><strong>RFC 7159</strong></a> and by\n<a class="reference external" href="http://www.ecma-international.org/publications/standards/Ecma-404.htm">ECMA-404</a>.\nThis section details this module\xe2\x80\x99s level of compliance with the RFC.\nFor simplicity, <a class="reference internal" href="#json.JSONEncoder" title="json.JSONEncoder"><code class="xref py py-class docutils literal"><span class="pre">JSONEncoder</span></code></a> and <a class="reference internal" href="#json.JSONDecoder" title="json.JSONDecoder"><code class="xref py py-class docutils literal"><span class="pre">JSONDecoder</span></code></a> subclasses, and\nparameters other than those explicitly mentioned, are not considered.</p>\n<p>This module does not comply with the RFC in a strict fashion, implementing some\nextensions that are valid JavaScript but not valid JSON.  In particular:</p>\n<ul class="simple">\n<li>Infinite and NaN number values are accepted and output;</li>\n<li>Repeated names within an object are accepted, and only the value of the last\nname-value pair is used.</li>\n</ul>\n<p>Since the RFC permits RFC-compliant parsers to accept input texts that are not\nRFC-compliant, this module\xe2\x80\x99s deserializer is technically RFC-compliant under\ndefault settings.</p>\n<div class="section" id="character-encodings">\n<h3>19.2.4.1. Character Encodings<a class="headerlink" href="#character-encodings" title="Permalink to this headline">\xc2\xb6</a></h3>\n<p>The RFC requires that JSON be represented using either UTF-8, UTF-16, or\nUTF-32, with UTF-8 being the recommended default for maximum interoperability.</p>\n<p>As permitted, though not required, by the RFC, this module\xe2\x80\x99s serializer sets\n<em>ensure_ascii=True</em> by default, thus escaping the output so that the resulting\nstrings only contain ASCII characters.</p>\n<p>Other than the <em>ensure_ascii</em> parameter, this module is defined strictly in\nterms of conversion between Python objects and\n<a class="reference internal" href="stdtypes.html#str" title="str"><code class="xref py py-class docutils literal"><span class="pre">Unicode</span> <span class="pre">strings</span></code></a>, and thus does not otherwise directly address\nthe issue of character encodings.</p>\n<p>The RFC prohibits adding a byte order mark (BOM) to the start of a JSON text,\nand this module\xe2\x80\x99s serializer does not add a BOM to its output.\nThe RFC permits, but does not require, JSON deserializers to ignore an initial\nBOM in their input.  This module\xe2\x80\x99s deserializer raises a <a class="reference internal" href="exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal"><span class="pre">ValueError</span></code></a>\nwhen an initial BOM is present.</p>\n<p>The RFC does not explicitly forbid JSON strings which contain byte sequences\nthat don\xe2\x80\x99t correspond to valid Unicode characters (e.g. unpaired UTF-16\nsurrogates), but it does note that they may cause interoperability problems.\nBy default, this module accepts and outputs (when present in the original\n<a class="reference internal" href="stdtypes.html#str" title="str"><code class="xref py py-class docutils literal"><span class="pre">str</span></code></a>) code points for such sequences.</p>\n</div>\n<div class="section" id="infinite-and-nan-number-values">\n<h3>19.2.4.2. Infinite and NaN Number Values<a class="headerlink" href="#infinite-and-nan-number-values" title="Permalink to this headline">\xc2\xb6</a></h3>\n<p>The RFC does not permit the representation of infinite or NaN number values.\nDespite that, by default, this module accepts and outputs <code class="docutils literal"><span class="pre">Infinity</span></code>,\n<code class="docutils literal"><span class="pre">-Infinity</span></code>, and <code class="docutils literal"><span class="pre">NaN</span></code> as if they were valid JSON number literal values:</p>\n<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="c1"># Neither of these calls raises an exception, but the results are not valid JSON</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="s1">&#39;-inf&#39;</span><span class="p">))</span>\n<span class="go">&#39;-Infinity&#39;</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="s1">&#39;nan&#39;</span><span class="p">))</span>\n<span class="go">&#39;NaN&#39;</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Same when deserializing</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="s1">&#39;-Infinity&#39;</span><span class="p">)</span>\n<span class="go">-inf</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="s1">&#39;NaN&#39;</span><span class="p">)</span>\n<span class="go">nan</span>\n</pre></div>\n</div>\n<p>In the serializer, the <em>allow_nan</em> parameter can be used to alter this\nbehavior.  In the deserializer, the <em>parse_constant</em> parameter can be used to\nalter this behavior.</p>\n</div>\n<div class="section" id="repeated-names-within-an-object">\n<h3>19.2.4.3. Repeated Names Within an Object<a class="headerlink" href="#repeated-names-within-an-object" title="Permalink to this headline">\xc2\xb6</a></h3>\n<p>The RFC specifies that the names within a JSON object should be unique, but\ndoes not mandate how repeated names in JSON objects should be handled.  By\ndefault, this module does not raise an exception; instead, it ignores all but\nthe last name-value pair for a given name:</p>\n<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">weird_json</span> <span class="o">=</span> <span class="s1">&#39;{&quot;x&quot;: 1, &quot;x&quot;: 2, &quot;x&quot;: 3}&#39;</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">weird_json</span><span class="p">)</span>\n<span class="go">{&#39;x&#39;: 3}</span>\n</pre></div>\n</div>\n<p>The <em>object_pairs_hook</em> parameter can be used to alter this behavior.</p>\n</div>\n<div class="section" id="top-level-non-object-non-array-values">\n<h3>19.2.4.4. Top-level Non-Object, Non-Array Values<a class="headerlink" href="#top-level-non-object-non-array-values" title="Permalink to this headline">\xc2\xb6</a></h3>\n<p>The old version of JSON specified by the obsolete <span class="target" id="index-3"></span><a class="rfc reference external" href="https://tools.ietf.org/html/rfc4627.html"><strong>RFC 4627</strong></a> required that\nthe top-level value of a JSON text must be either a JSON object or array\n(Python <a class="reference internal" href="stdtypes.html#dict" title="dict"><code class="xref py py-class docutils literal"><span class="pre">dict</span></code></a> or <a class="reference internal" href="stdtypes.html#list" title="list"><code class="xref py py-class docutils literal"><span class="pre">list</span></code></a>), and could not be a JSON null,\nboolean, number, or string value.  <span class="target" id="index-4"></span><a class="rfc reference external" href="https://tools.ietf.org/html/rfc7159.html"><strong>RFC 7159</strong></a> removed that restriction, and\nthis module does not and has never implemented that restriction in either its\nserializer or its deserializer.</p>\n<p>Regardless, for maximum interoperability, you may wish to voluntarily adhere\nto the restriction yourself.</p>\n</div>\n<div class="section" id="implementation-limitations">\n<h3>19.2.4.5. Implementation Limitations<a class="headerlink" href="#implementation-limitations" title="Permalink to this headline">\xc2\xb6</a></h3>\n<p>Some JSON deserializer implementations may set limits on:</p>\n<ul class="simple">\n<li>the size of accepted JSON texts</li>\n<li>the maximum level of nesting of JSON objects and arrays</li>\n<li>the range and precision of JSON numbers</li>\n<li>the content and maximum length of JSON strings</li>\n</ul>\n<p>This module does not impose any such limits beyond those of the relevant\nPython datatypes themselves or the Python interpreter itself.</p>\n<p>When serializing to JSON, beware any such limitations in applications that may\nconsume your JSON.  In particular, it is common for JSON numbers to be\ndeserialized into IEEE 754 double precision numbers and thus subject to that\nrepresentation\xe2\x80\x99s range and precision limitations.  This is especially relevant\nwhen serializing Python <a class="reference internal" href="functions.html#int" title="int"><code class="xref py py-class docutils literal"><span class="pre">int</span></code></a> values of extremely large magnitude, or\nwhen serializing instances of \xe2\x80\x9cexotic\xe2\x80\x9d numerical types such as\n<a class="reference internal" href="decimal.html#decimal.Decimal" title="decimal.Decimal"><code class="xref py py-class docutils literal"><span class="pre">decimal.Decimal</span></code></a>.</p>\n</div>\n</div>\n<div class="section" id="module-json.tool">\n<span id="command-line-interface"></span><span id="json-commandline"></span><h2>19.2.5. Command Line Interface<a class="headerlink" href="#module-json.tool" title="Permalink to this headline">\xc2\xb6</a></h2>\n<p><strong>Source code:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.6/Lib/json/tool.py">Lib/json/tool.py</a></p>\n<hr class="docutils" />\n<p>The <a class="reference internal" href="#module-json.tool" title="json.tool: A command line to validate and pretty-print JSON."><code class="xref py py-mod docutils literal"><span class="pre">json.tool</span></code></a> module provides a simple command line interface to validate\nand pretty-print JSON objects.</p>\n<p>If the optional <code class="docutils literal"><span class="pre">infile</span></code> and <code class="docutils literal"><span class="pre">outfile</span></code> arguments are not\nspecified, <a class="reference internal" href="sys.html#sys.stdin" title="sys.stdin"><code class="xref py py-attr docutils literal"><span class="pre">sys.stdin</span></code></a> and <a class="reference internal" href="sys.html#sys.stdout" title="sys.stdout"><code class="xref py py-attr docutils literal"><span class="pre">sys.stdout</span></code></a> will be used respectively:</p>\n<div class="highlight-bash"><div class="highlight"><pre><span></span>$ <span class="nb">echo</span> <span class="s1">&#39;{&quot;json&quot;: &quot;obj&quot;}&#39;</span> <span class="p">|</span> python -m json.tool\n<span class="o">{</span>\n    <span class="s2">&quot;json&quot;</span>: <span class="s2">&quot;obj&quot;</span>\n<span class="o">}</span>\n$ <span class="nb">echo</span> <span class="s1">&#39;{1.2:3.4}&#39;</span> <span class="p">|</span> python -m json.tool\nExpecting property name enclosed in double quotes: line <span class="m">1</span> column <span class="m">2</span> <span class="o">(</span>char <span class="m">1</span><span class="o">)</span>\n</pre></div>\n</div>\n<div class="versionchanged">\n<p><span class="versionmodified">Changed in version 3.5: </span>The output is now in the same order as the input. Use the\n<a class="reference internal" href="#cmdoption-sort-keys"><code class="xref std std-option docutils literal"><span class="pre">--sort-keys</span></code></a> option to sort the output of dictionaries\nalphabetically by key.</p>\n</div>\n<div class="section" id="command-line-options">\n<h3>19.2.5.1. Command line options<a class="headerlink" href="#command-line-options" title="Permalink to this headline">\xc2\xb6</a></h3>\n<dl class="cmdoption">\n<dt id="cmdoption-arg-infile">\n<code class="descname">infile</code><code class="descclassname"></code><a class="headerlink" href="#cmdoption-arg-infile" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>The JSON file to be validated or pretty-printed:</p>\n<div class="highlight-bash"><div class="highlight"><pre><span></span>$ python -m json.tool mp_films.json\n<span class="o">[</span>\n    <span class="o">{</span>\n        <span class="s2">&quot;title&quot;</span>: <span class="s2">&quot;And Now for Something Completely Different&quot;</span>,\n        <span class="s2">&quot;year&quot;</span>: <span class="m">1971</span>\n    <span class="o">}</span>,\n    <span class="o">{</span>\n        <span class="s2">&quot;title&quot;</span>: <span class="s2">&quot;Monty Python and the Holy Grail&quot;</span>,\n        <span class="s2">&quot;year&quot;</span>: <span class="m">1975</span>\n    <span class="o">}</span>\n<span class="o">]</span>\n</pre></div>\n</div>\n<p>If <em>infile</em> is not specified, read from <a class="reference internal" href="sys.html#sys.stdin" title="sys.stdin"><code class="xref py py-attr docutils literal"><span class="pre">sys.stdin</span></code></a>.</p>\n</dd></dl>\n\n<dl class="cmdoption">\n<dt id="cmdoption-arg-outfile">\n<code class="descname">outfile</code><code class="descclassname"></code><a class="headerlink" href="#cmdoption-arg-outfile" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>Write the output of the <em>infile</em> to the given <em>outfile</em>. Otherwise, write it\nto <a class="reference internal" href="sys.html#sys.stdout" title="sys.stdout"><code class="xref py py-attr docutils literal"><span class="pre">sys.stdout</span></code></a>.</p>\n</dd></dl>\n\n<dl class="cmdoption">\n<dt id="cmdoption-sort-keys">\n<code class="descname">--sort-keys</code><code class="descclassname"></code><a class="headerlink" href="#cmdoption-sort-keys" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>Sort the output of dictionaries alphabetically by key.</p>\n<div class="versionadded">\n<p><span class="versionmodified">New in version 3.5.</span></p>\n</div>\n</dd></dl>\n\n<dl class="cmdoption">\n<dt id="cmdoption-h">\n<code class="descname">-h</code><code class="descclassname"></code><code class="descclassname">, </code><code class="descname">--help</code><code class="descclassname"></code><a class="headerlink" href="#cmdoption-h" title="Permalink to this definition">\xc2\xb6</a></dt>\n<dd><p>Show the help message.</p>\n</dd></dl>\n\n<p class="rubric">Footnotes</p>\n<table class="docutils footnote" frame="void" id="rfc-errata" rules="none">\n<colgroup><col class="label" /><col /></colgroup>\n<tbody valign="top">\n<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>As noted in <a class="reference external" href="https://www.rfc-editor.org/errata_search.php?rfc=7159">the errata for RFC 7159</a>,\nJSON permits literal U+2028 (LINE SEPARATOR) and\nU+2029 (PARAGRAPH SEPARATOR) characters in strings, whereas JavaScript\n(as of ECMAScript Edition 5.1) does not.</td></tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n\n\n          </div>\n        </div>\n      </div>\n      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">\n        <div class="sphinxsidebarwrapper">\n  <h3><a href="../contents.html">Table Of Contents</a></h3>\n  <ul>\n<li><a class="reference internal" href="#">19.2. <code class="docutils literal"><span class="pre">json</span></code> \xe2\x80\x94 JSON encoder and decoder</a><ul>\n<li><a class="reference internal" href="#basic-usage">19.2.1. Basic Usage</a></li>\n<li><a class="reference internal" href="#encoders-and-decoders">19.2.2. Encoders and Decoders</a></li>\n<li><a class="reference internal" href="#exceptions">19.2.3. Exceptions</a></li>\n<li><a class="reference internal" href="#standard-compliance-and-interoperability">19.2.4. Standard Compliance and Interoperability</a><ul>\n<li><a class="reference internal" href="#character-encodings">19.2.4.1. Character Encodings</a></li>\n<li><a class="reference internal" href="#infinite-and-nan-number-values">19.2.4.2. Infinite and NaN Number Values</a></li>\n<li><a class="reference internal" href="#repeated-names-within-an-object">19.2.4.3. Repeated Names Within an Object</a></li>\n<li><a class="reference internal" href="#top-level-non-object-non-array-values">19.2.4.4. Top-level Non-Object, Non-Array Values</a></li>\n<li><a class="reference internal" href="#implementation-limitations">19.2.4.5. Implementation Limitations</a></li>\n</ul>\n</li>\n<li><a class="reference internal" href="#module-json.tool">19.2.5. Command Line Interface</a><ul>\n<li><a class="reference internal" href="#command-line-options">19.2.5.1. Command line options</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n  <h4>Previous topic</h4>\n  <p class="topless"><a href="email.iterators.html"\n                        title="previous chapter">19.1.15. <code class="docutils literal"><span class="pre">email.iterators</span></code>: Iterators</a></p>\n  <h4>Next topic</h4>\n  <p class="topless"><a href="mailcap.html"\n                        title="next chapter">19.3. <code class="docutils literal"><span class="pre">mailcap</span></code> \xe2\x80\x94 Mailcap file handling</a></p>\n  <div role="note" aria-label="source link">\n    <h3>This Page</h3>\n    <ul class="this-page-menu">\n      <li><a href="../bugs.html">Report a Bug</a></li>\n      <li>\n        <a href="https://github.com/python/cpython/blob/3.6/Doc/library/json.rst"\n            rel="nofollow">Show Source\n        </a>\n      </li>\n    </ul>\n  </div>\n        </div>\n      </div>\n      <div class="clearer"></div>\n    </div>  \n    <div class="related" role="navigation" aria-label="related navigation">\n      <h3>Navigation</h3>\n      <ul>\n        <li class="right" style="margin-right: 10px">\n          <a href="../genindex.html" title="General Index"\n             >index</a></li>\n        <li class="right" >\n          <a href="../py-modindex.html" title="Python Module Index"\n             >modules</a> |</li>\n        <li class="right" >\n          <a href="mailcap.html" title="19.3. mailcap \xe2\x80\x94 Mailcap file handling"\n             >next</a> |</li>\n        <li class="right" >\n          <a href="email.iterators.html" title="19.1.15. email.iterators: Iterators"\n             >previous</a> |</li>\n        <li><img src="../_static/py.png" alt=""\n                 style="vertical-align: middle; margin-top: -1px"/></li>\n        <li><a href="https://www.python.org/">Python</a> &#187;</li>\n        <li>\n          <span class="language_switcher_placeholder">en</span>\n          <span class="version_switcher_placeholder">3.6.4rc1</span>\n          <a href="../index.html">Documentation </a> &#187;\n        </li>\n\n          <li class="nav-item nav-item-1"><a href="index.html" >The Python Standard Library</a> &#187;</li>\n          <li class="nav-item nav-item-2"><a href="netdata.html" >19. Internet Data Handling</a> &#187;</li>\n    <li class="right">\n        \n\n    <div class="inline-search" style="display: none" role="search">\n        <form class="inline-search" action="../search.html" method="get">\n          <input placeholder="Quick search" type="text" name="q" />\n          <input type="submit" value="Go" />\n          <input type="hidden" name="check_keywords" value="yes" />\n          <input type="hidden" name="area" value="default" />\n        </form>\n    </div>\n    <script type="text/javascript">$(\'.inline-search\').show(0);</script>\n         |\n    </li>\n\n      </ul>\n    </div>  \n    <div class="footer">\n    &copy; <a href="../copyright.html">Copyright</a> 2001-2017, Python Software Foundation.\n    <br />\n    The Python Software Foundation is a non-profit corporation.\n    <a href="https://www.python.org/psf/donations/">Please donate.</a>\n    <br />\n    Last updated on Dec 14, 2017.\n    <a href="../bugs.html">Found a bug</a>?\n    <br />\n    Created using <a href="http://sphinx.pocoo.org/">Sphinx</a> 1.6.4.\n    </div>\n\n  </body>\n</html>'